In this version we need to include the header: "xmmintrin.h". This header helps us to perform
SIMD (Single Instruction, multiple Data) on modern processors. So we can perform more than just 
one instruction on one data.

We use __m128, which represents a 128-bit register used for SIMD. If we now perform our operations
we can see that the assertion fails. This happens, because we load a 128-bit register for every value in 
our loop. Float is 32-bit, so we can perform the SIMD- instruction on 4 float values at the same time.
So we change the inner loop "inrement-condition" to i +=4.

Now we can see that the assertion is true and we have a fast program.

This exercise differs from the other exercises in terms of SIMD: we perform a single instruction on multiple data.

We can barely see any difference when using perf on the program with the different Unit Masks and Event Code 07
the only thing that changes is the value of the so called "performance counter".
performance counter events may indicate cache misses, branch mispredictions, but can also indicate
cache hits, but i can't see much time difference so I would say that this is okay then...
(we can also see in the picture that they are uncorrelated)