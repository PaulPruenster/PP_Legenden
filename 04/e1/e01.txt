
https://docs.google.com/spreadsheets/d/1Jg1me5njGN0m9VCQQV03pSh0lCdXdN4wNxfCHyiIH7I/edit?usp=sharing


OMP_PLACES is an environment variable used in OpenMP (Open Multi-Processing)
programming to control the placement of threads and their corresponding data.

OMP_PLACES=cores:
    the OpenMP runtime system will create a thread for each physical processing core on the system,
    and each thread will be assigned to execute on the corresponding core. 


OMP_PLACES=sockets:
    the OpenMP runtime system will create a thread for each physical processor socket on the system,
    and each thread will be assigned to execute on the corresponding socket.

OMP_PLACES=threads:
    the OpenMP runtime system will create a thread for each hardware thread on the system,
    and each thread will be assigned to execute on the corresponding hardware thread. 


OMP_PROC_BIND=close:
    The OpenMP runtime system will attempt to bind each thread to a processor or core 
    that is physically close to the processor or core that executed the thread's predecessor.
    

OMP_PROC_BIND=spread:
    The OpenMP runtime system will attempt to spread the threads across the available processors or cores as evenly as possible. 

OMP_PROC_BIND=master:
    the OpenMP runtime system will bind each thread to the same processor or core as the master thread,
    which is the thread that executed the parallel region construct.


In our diagram we can see the same thing that was already mentioned in the lecture:
    - In general the master-binding, is the best, because some threads depend on their master-threads and therefore we have a reduced cache and memory contention.
    - The spread-binding in our case is completely useless, because we have a lot of conflicts and a bad "locality" (bc of the spread)
    - close- Binding is a lot better than the spread-binding, but we still have more conflicts then master-binding
    - In general creating a thread for each hardware thread is the best solution in terms of wall-time, because with this option we make sure that
    the hardware threads have a good workload 


